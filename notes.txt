
 ..*Using let gameConfig fix the size of the game canvas.

    				******
One of the most important goals to accomplish when building a cross platform
game is to make it look good no matter the device it's running on.
For this reason, the first thing to do is try to cover the wider screen area possible
while keeping the size ratio and make the game look pretty much the same on
each device, no matter the resolution.
It gets frustrating when you run a game – especially on a mobile device – and you
see it does not cover the entire screen. It just makes the game look old and
outdated.
And obviously people want to play new and modern games.
We need to change a bit game.js rewriting some code and adding a new function.

function resizeGame(){
    let canvas = document.querySelector("canvas");
    let windowWidth = window.innerWidth;
    let windowHeight = window.innerHeight;
    let windowRatio = windowWidth / windowHeight;
    let gameRatio = game.config.width / game.config.height;
    if(windowRatio < gameRatio){
        canvas.style.width = windowWidth + 'px';
        canvas.style.height = (windowWidth / gameRatio) + "px";
    }else{
        canvas.style.width = (windowHeight * gameRatio) + "px";
        canvas.style.height = windowHeight + "px";
    }
}

				******

	-branch: Loading Images: The importance of storing all game
customizable variables in a single place:

Every game has a series of variables which define the essence of the game itself.
In the making of 4096 game, for instance, we said we will be playing on a 4x4
grid, which is a grid with 4 rows and 4 columns, and each tile on the grid is a
200x200 pixels image with a 20 pixels spacing.
We are going to refer to these numbers a lot of times in the making of the game,
each time we will need to know the size of the board, or the size of a tile, and
believe me, it will happen quite often.
Rather than filling the source code with a series of “4”, “200”, and so on scattered
here and there, it would be better to store these values somewhere safe and easy to
access.

 ..*We made a 'gameOptions' variable to the window.onLoad() within game.js:
	tileSize: the size of each tile, in pixels.
	tileSpacing: the spacing between two tiles, in pixels.
	boardSize: another object which contains the amount of rows and columns to be
	 added to the board. 

 ..*This branch also makes use of 'psuedoscience'/calculations within gameConfig{} to make the images/squares render correctly on all screen sizes. Makes the tiles responsive.


            **********
 ..*Game-Tiles-As-A-Sprite*..
  ..*We load the large game sprite but set the visibility to false.
  ..*We loop through each square on our game board and assign it a tile/value from our large gamesprite. (game.js>playGame>create()).
    ..*Makes use of this.boardArray = []


            ***********
..*Creating-New-Tiles-On-Empty-Spots*..
 ..*The game plays as the board is empty but for two tiles with a 'Two' value. Each turn when we move, a new 'Two' tile will appear on a previously empty tile.
 ..*In this branch we will code this logic.
 ..*We achieve this via PlayGame.onCreate() -> this.addTile(). We call that function twice, what it does is it goes through our boardArray at random and if the board is empty, it will make visible a tile with a 'Two' value.

            *************
        Using-Tweens-Animate-Tiles
..*Set tween speed set up in gameOptions{}..*The animation we will be showcasing is when the tile appears the .alpha will go from 0 to 1 in 2000 milliseconds.
..*We also set a "this.canMove" bool set to false which becomes true once the tween is complete.

            *************
            Player-Input
..*Player input will be with keyboard, mouse or fingers. This is done with -> [
    this.input.keyboard.on("keydown", this.handleKey, this);
    this.input.on("pointerup", this.handleSwipe, this);
]

..*The code within handleSwipe(e) is goTo code for swipe management that I will need to master how to use.

.."No matter the size of the canvas, you will be always working with game size.
This saves us from a lot of headache since we don't have to bear with screen
resolutions or window sizes, we just have to set a game size and that's all."

            Processing Pointer Input
..*First thing with processing swipe is we first first determine that the input is actually indeed a swipe from the user. The ways to determine this are:
    1. Duration: distinguish from tap
    2. Distance Covered: distinguish from press down.
    3. Direction: Only allow for horizontal or vertical. No diagonal or circles.

..*Vector Magnitude and Normilization come into play*..

..*Vector Magnitude: Each input move is considered a 'vector'. That is each one has {angle, length}.
    ..All vectors have a horizontal and vertical component which can be calculated by multiplying the magnitude by the cosine and the sine of the direction.

..*Vectors can be "normalized", this happens when we take a vector of any length and keeping it in the same direction, we change its length to equal 1, aka, a "unit vector".


            Rules for Our handleSwipe
..*We will add these new values to our gameOptions to check for these three conditions for a player input to be considered a swipe:
    ..1. Duration: A swipe can't last more than one second.
    ..2. Distance: Must be at least 20px.
    ..3. Direction: Only the Cardinal Directions. However, we cannot expect players to move these directions with surgeon precision. So we will give some wiggle room in the form of 'sectors'.
        ..**If we split a 360degree circle into '12 sectors', each sector has a 30degrees angle. Lets assign each sector a swipe direction.
        ..If we 'normalize' the swipe vector, the horizontal movement ranges from cos(0) to cos(30). That is 1 to 0.866 ??
        ..Normalizing the vertical movement, up and down ranges from sin(90) to sin(60), that is 1 to 0.866 ??
        ..So they say we can approximate there is a valid swipe when the bigger component of the normalized swipe vectore measures at least 0.85. 
            ..*!*All this to determine the 'valid Directions'

    ..*We will turn this all into code logic first in gameOptions{} then within handleSwipe().

     ..*!*All this explained on PG. 83


